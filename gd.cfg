# This is the configuration file for GuardDuty-SOAR.

# ==============================================================================
# GENERAL SETTINGS
# ==============================================================================
[General]
# (STRING) - The desired log level for the application.
#            Allows for dynamic control over logging verbosity.
# OPTIONS: DEBUG, INFO, WARNING, ERROR, CRITICAL
# DEFAULT: INFO
log_level = DEBUG
boto_log_level = WARNING

# (LIST) - A list of GuardDuty finding types to ignore.
ignored_findings = 
    
# ==============================================================================
# EC2 SETTINGS
# ==============================================================================
[EC2]
# (STRING) - The prefix for EBS snapshot descriptions.
snapshot_description_prefix = GD-SOAR-Snapshot-

# (BOOLEAN) - Allow the application to terminate instances.
allow_terminate = True

# (BOOLEAN) - Allow the application to remove public access security group rules.
#           - This is enabled by default. But, if you are using your ec2 instances
#           - as a webserver or some other publicly accessible server, you will want
#           - to disable this. This rule is directly invoked from the finding:
#           - Recon:EC2/PortProbeUnprotectedPort
allow_remove_public_access = True

# ==============================================================================
# IAM SETTINGS
# ==============================================================================
[IAM]
# (INTEGER) - The number of CloudTrail events to retrieve for a principal's history.
#             This value is used by GetCloudTrailHistoryAction
# MIN: 1
# MAX: 50
# DEFAULT: 25
cloudtrail_history_max_results = 25

# (BOOLEAN) - Allow the application to analyze IAM policies attached to finding
#             identity for overly permissive statements (e.g., Action: "*" on Resource: "*")
# DEFAULT: True
analyze_iam_permissions = True

# (BOOLEAN) - Whether or not to allow the playbooks actions to 
#           - attach the AWS managed "AWSDenyAll" policy to
#           - IAM principals (user or role) from an S3 finding.
allow_iam_quarantine = True


# (STRING) - The IAM ARN policy for a deny all policy to attach to roles/users to
#          - effectively quarantine them. We default to the AWS managed AWSDenyAll policy
iam_deny_all_policy_arn = arn:aws:iam::aws:policy/AWSDenyAll


# ==============================================================================
# NOTIFICATIONS
# ==============================================================================
[Notifications]
# --- Simple Email Service (SES) ---
allow_ses = True
registered_email_address = user@example.com

# --- Simple Notification Service (SNS) ---
allow_sns = True
sns_topic_arn = arn:aws:sns:us-east-1:1234567891234:GuardDuty-SOAR-Alerts


[S3]
# (BOOLEAN) - Whether or not to allow the playbook to attach a
#           - block public access policy to a bucket that is 
#           - potentially exposed
allow_s3_public_block = True